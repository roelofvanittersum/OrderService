/*
 * Dutch Insurance Order API
 *
 * API for placing and fetching orders in the Dutch insurance market
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Rvi.OrderAPI.Model.Converters;

        namespace Rvi.OrderAPI.Model.Models
        { 
            /// <summary>
                /// Bank account details for payment
                /// </summary>
            [DataContract]
            public class OrderStatusV1 : IEquatable<OrderStatusV1>
            {
                /// <summary>
                    /// Unique identifier for the insurance product
                    /// </summary>
                    /// <value>Unique identifier for the insurance product</value>
                [DataMember(Name="orderId")]
                    public string OrderId { get => OrderIdValue; set { OrderIdValue = value; OrderIdIsSet = true; } }
                    private string OrderIdValue;
                    public bool OrderIdIsSet { get; set; }

                /// <summary>
                    /// Gets or Sets Status
                    /// </summary>
                    [RegularExpression("pending|in_progress|completed|failed")]
                [DataMember(Name="status")]
                    public string Status { get => StatusValue; set { StatusValue = value; StatusIsSet = true; } }
                    private string StatusValue;
                    public bool StatusIsSet { get; set; }

            /// <summary>
                /// Returns the string presentation of the object
                /// </summary>
            /// <returns>String presentation of the object</returns>
            public override string ToString()
            {
            var sb = new StringBuilder();
            sb.Append("class OrderStatusV1 {\n");
                sb.Append("  OrderId: ").Append(OrderId).Append("\n");
                sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
            }

            /// <summary>
                /// Returns the JSON string presentation of the object
                /// </summary>
            /// <returns>JSON string presentation of the object</returns>
            public string ToJson()
            {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
            }

            /// <summary>
                /// Returns true if objects are equal
                /// </summary>
            /// <param name="obj">Object to be compared</param>
            /// <returns>Boolean</returns>
            public override bool Equals(object obj)
            {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderStatusV1)obj);
            }

            /// <summary>
                /// Returns true if OrderStatusV1 instances are equal
                /// </summary>
            /// <param name="other">Instance of OrderStatusV1 to be compared</param>
            /// <returns>Boolean</returns>
            public bool Equals(OrderStatusV1 other)
            {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                OrderId == other.OrderId ||
                OrderId != null &&
                OrderId.Equals(other.OrderId)
                ) && 
                (
                Status == other.Status ||
                Status != null &&
                Status.Equals(other.Status)
                );
            }

            /// <summary>
                /// Gets the hash code
                /// </summary>
            /// <returns>Hash code</returns>
            public override int GetHashCode()
            {
            unchecked // Overflow is fine, just wrap
            {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
                if (OrderId != null)
                hashCode = hashCode * 59 + OrderId.GetHashCode();
                if (Status != null)
                hashCode = hashCode * 59 + Status.GetHashCode();
            return hashCode;
            }
            }

            #region Operators
            #pragma warning disable 1591

            public static bool operator ==(OrderStatusV1 left, OrderStatusV1 right)
            {
            return Equals(left, right);
            }

            public static bool operator !=(OrderStatusV1 left, OrderStatusV1 right)
            {
            return !Equals(left, right);
            }

            #pragma warning restore 1591
            #endregion Operators
            }
}