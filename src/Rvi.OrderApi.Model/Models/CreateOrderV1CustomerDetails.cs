/*
 * Dutch Insurance Order API
 *
 * API for placing and fetching orders in the Dutch insurance market
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Rvi.OrderAPI.Model.Converters;

        namespace Rvi.OrderAPI.Model.Models
        { 
            /// <summary>
                /// Basic details of the customer
                /// </summary>
            [DataContract]
            public class CreateOrderV1CustomerDetails : IEquatable<CreateOrderV1CustomerDetails>
            {
                /// <summary>
                    /// Name of the customer
                    /// </summary>
                    /// <value>Name of the customer</value>
                [DataMember(Name="name")]
                    public string Name { get => NameValue; set { NameValue = value; NameIsSet = true; } }
                    private string NameValue;
                    public bool NameIsSet { get; set; }

                /// <summary>
                    /// Email address of the customer
                    /// </summary>
                    /// <value>Email address of the customer</value>
                [DataMember(Name="email")]
                    public string Email { get => EmailValue; set { EmailValue = value; EmailIsSet = true; } }
                    private string EmailValue;
                    public bool EmailIsSet { get; set; }

                /// <summary>
                    /// Phone number of the customer
                    /// </summary>
                    /// <value>Phone number of the customer</value>
                [DataMember(Name="phoneNumber")]
                    public string PhoneNumber { get => PhoneNumberValue; set { PhoneNumberValue = value; PhoneNumberIsSet = true; } }
                    private string PhoneNumberValue;
                    public bool PhoneNumberIsSet { get; set; }

            /// <summary>
                /// Returns the string presentation of the object
                /// </summary>
            /// <returns>String presentation of the object</returns>
            public override string ToString()
            {
            var sb = new StringBuilder();
            sb.Append("class CreateOrderV1CustomerDetails {\n");
                sb.Append("  Name: ").Append(Name).Append("\n");
                sb.Append("  Email: ").Append(Email).Append("\n");
                sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
            }

            /// <summary>
                /// Returns the JSON string presentation of the object
                /// </summary>
            /// <returns>JSON string presentation of the object</returns>
            public string ToJson()
            {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
            }

            /// <summary>
                /// Returns true if objects are equal
                /// </summary>
            /// <param name="obj">Object to be compared</param>
            /// <returns>Boolean</returns>
            public override bool Equals(object obj)
            {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateOrderV1CustomerDetails)obj);
            }

            /// <summary>
                /// Returns true if CreateOrderV1CustomerDetails instances are equal
                /// </summary>
            /// <param name="other">Instance of CreateOrderV1CustomerDetails to be compared</param>
            /// <returns>Boolean</returns>
            public bool Equals(CreateOrderV1CustomerDetails other)
            {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                Name == other.Name ||
                Name != null &&
                Name.Equals(other.Name)
                ) && 
                (
                Email == other.Email ||
                Email != null &&
                Email.Equals(other.Email)
                ) && 
                (
                PhoneNumber == other.PhoneNumber ||
                PhoneNumber != null &&
                PhoneNumber.Equals(other.PhoneNumber)
                );
            }

            /// <summary>
                /// Gets the hash code
                /// </summary>
            /// <returns>Hash code</returns>
            public override int GetHashCode()
            {
            unchecked // Overflow is fine, just wrap
            {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
                if (Name != null)
                hashCode = hashCode * 59 + Name.GetHashCode();
                if (Email != null)
                hashCode = hashCode * 59 + Email.GetHashCode();
                if (PhoneNumber != null)
                hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
            return hashCode;
            }
            }

            #region Operators
            #pragma warning disable 1591

            public static bool operator ==(CreateOrderV1CustomerDetails left, CreateOrderV1CustomerDetails right)
            {
            return Equals(left, right);
            }

            public static bool operator !=(CreateOrderV1CustomerDetails left, CreateOrderV1CustomerDetails right)
            {
            return !Equals(left, right);
            }

            #pragma warning restore 1591
            #endregion Operators
            }
}